Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     statement -> INT IDENTIFIER EQUALS expression SEMICOLON
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     expression -> term
Rule 6     term -> term MULTIPLY factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> factor
Rule 9     factor -> NUMBER
Rule 10    factor -> IDENTIFIER
Rule 11    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

DIVIDE               : 7
EQUALS               : 2
IDENTIFIER           : 2 10
INT                  : 2
LPAREN               : 11
MINUS                : 4
MULTIPLY             : 6
NUMBER               : 9
PLUS                 : 3
RPAREN               : 11
SEMICOLON            : 2
error                : 

Nonterminals, with rules where they appear

expression           : 2 3 4 11
factor               : 6 7 8
program              : 0
statement            : 1
term                 : 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) statement -> . INT IDENTIFIER EQUALS expression SEMICOLON

    INT             shift and go to state 3

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) statement -> INT . IDENTIFIER EQUALS expression SEMICOLON

    IDENTIFIER      shift and go to state 4


state 4

    (2) statement -> INT IDENTIFIER . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 5


state 5

    (2) statement -> INT IDENTIFIER EQUALS . expression SEMICOLON
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    expression                     shift and go to state 7
    term                           shift and go to state 8
    factor                         shift and go to state 9

state 6

    (10) factor -> IDENTIFIER .

    MULTIPLY        reduce using rule 10 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 10 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 10 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 10 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 10 (factor -> IDENTIFIER .)


state 7

    (2) statement -> INT IDENTIFIER EQUALS expression . SEMICOLON
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 12
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 8

    (5) expression -> term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 5 (expression -> term .)
    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    RPAREN          reduce using rule 5 (expression -> term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 9

    (8) term -> factor .

    MULTIPLY        reduce using rule 8 (term -> factor .)
    DIVIDE          reduce using rule 8 (term -> factor .)
    SEMICOLON       reduce using rule 8 (term -> factor .)
    PLUS            reduce using rule 8 (term -> factor .)
    MINUS           reduce using rule 8 (term -> factor .)
    RPAREN          reduce using rule 8 (term -> factor .)


state 10

    (9) factor -> NUMBER .

    MULTIPLY        reduce using rule 9 (factor -> NUMBER .)
    DIVIDE          reduce using rule 9 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 9 (factor -> NUMBER .)
    PLUS            reduce using rule 9 (factor -> NUMBER .)
    MINUS           reduce using rule 9 (factor -> NUMBER .)
    RPAREN          reduce using rule 9 (factor -> NUMBER .)


state 11

    (11) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    expression                     shift and go to state 17
    term                           shift and go to state 8
    factor                         shift and go to state 9

state 12

    (2) statement -> INT IDENTIFIER EQUALS expression SEMICOLON .

    $end            reduce using rule 2 (statement -> INT IDENTIFIER EQUALS expression SEMICOLON .)


state 13

    (3) expression -> expression PLUS . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    term                           shift and go to state 18
    factor                         shift and go to state 9

state 14

    (4) expression -> expression MINUS . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    term                           shift and go to state 19
    factor                         shift and go to state 9

state 15

    (6) term -> term MULTIPLY . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    factor                         shift and go to state 20

state 16

    (7) term -> term DIVIDE . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 11

    factor                         shift and go to state 21

state 17

    (11) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 18

    (3) expression -> expression PLUS term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 3 (expression -> expression PLUS term .)
    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 19

    (4) expression -> expression MINUS term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 4 (expression -> expression MINUS term .)
    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 20

    (6) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 6 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 6 (term -> term MULTIPLY factor .)
    SEMICOLON       reduce using rule 6 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 6 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 6 (term -> term MULTIPLY factor .)
    RPAREN          reduce using rule 6 (term -> term MULTIPLY factor .)


state 21

    (7) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 7 (term -> term DIVIDE factor .)


state 22

    (11) factor -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (factor -> LPAREN expression RPAREN .)

