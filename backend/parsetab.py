
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EQUALS IDENTIFIER INT LPAREN MINUS MULTIPLY NUMBER PLUS RPAREN SEMICOLONprogram : statementstatement : INT IDENTIFIER EQUALS expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term MULTIPLY factor\n            | term DIVIDE factorterm : factorfactor : NUMBERfactor : IDENTIFIERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'INT':([0,],[3,]),'$end':([1,2,12,],[0,-1,-2,]),'IDENTIFIER':([3,5,11,13,14,15,16,],[4,6,6,6,6,6,6,]),'EQUALS':([4,],[5,]),'NUMBER':([5,11,13,14,15,16,],[10,10,10,10,10,10,]),'LPAREN':([5,11,13,14,15,16,],[11,11,11,11,11,11,]),'MULTIPLY':([6,8,9,10,18,19,20,21,22,],[-10,15,-8,-9,15,15,-6,-7,-11,]),'DIVIDE':([6,8,9,10,18,19,20,21,22,],[-10,16,-8,-9,16,16,-6,-7,-11,]),'SEMICOLON':([6,7,8,9,10,18,19,20,21,22,],[-10,12,-5,-8,-9,-3,-4,-6,-7,-11,]),'PLUS':([6,7,8,9,10,17,18,19,20,21,22,],[-10,13,-5,-8,-9,13,-3,-4,-6,-7,-11,]),'MINUS':([6,7,8,9,10,17,18,19,20,21,22,],[-10,14,-5,-8,-9,14,-3,-4,-6,-7,-11,]),'RPAREN':([6,8,9,10,17,18,19,20,21,22,],[-10,-5,-8,-9,22,-3,-4,-6,-7,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,],[2,]),'expression':([5,11,],[7,17,]),'term':([5,11,13,14,],[8,8,18,19,]),'factor':([5,11,13,14,15,16,],[9,9,9,9,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','syntax_analysis.py',21),
  ('statement -> INT IDENTIFIER EQUALS expression SEMICOLON','statement',5,'p_statement_declaration','syntax_analysis.py',25),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','syntax_analysis.py',35),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','syntax_analysis.py',36),
  ('expression -> term','expression',1,'p_expression_term','syntax_analysis.py',44),
  ('term -> term MULTIPLY factor','term',3,'p_term_binop','syntax_analysis.py',48),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','syntax_analysis.py',49),
  ('term -> factor','term',1,'p_term_factor','syntax_analysis.py',57),
  ('factor -> NUMBER','factor',1,'p_factor_num','syntax_analysis.py',61),
  ('factor -> IDENTIFIER','factor',1,'p_factor_id','syntax_analysis.py',65),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','syntax_analysis.py',69),
]
