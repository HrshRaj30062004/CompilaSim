
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR COMMA DIVIDE ELSE EQ EQUALS FLOAT FOR GE GT IDENTIFIER IF INT LBRACE LE LPAREN LT MINUS MULTIPLY NE NUMBER PLUS PRINTF RBRACE RETURN RPAREN SCANF SEMICOLON STRING WHILEprogram : functionfunction : INT IDENTIFIER LPAREN RPAREN blockblock : LBRACE statements RBRACEstatements : statements statement\n                  | statementstatement : INT decl_list SEMICOLONdecl_list : decl_list COMMA decl\n                 | decldecl : IDENTIFIER\n            | IDENTIFIER EQUALS expressionstatement : IDENTIFIER EQUALS expression SEMICOLONstatement : RETURN expression SEMICOLONstatement : IF LPAREN expression RPAREN blockstatement : IF LPAREN expression RPAREN block ELSE blockstatement : WHILE LPAREN expression RPAREN blockstatement : PRINTF LPAREN string_and_args RPAREN SEMICOLON\n                 | SCANF LPAREN string_and_args RPAREN SEMICOLONstring_and_args : STRING\n                       | STRING COMMA arg_listarg_list : arg_list COMMA expression\n                | expressionexpression : expression LT term\n                  | expression GT term\n                  | expression LE term\n                  | expression GE term\n                  | expression EQ term\n                  | expression NE termexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term MULTIPLY factor\n            | term DIVIDE factorterm : factorfactor : NUMBERfactor : IDENTIFIERfactor : LPAREN expression RPARENfactor : STRING'
    
_lr_action_items = {'INT':([0,8,9,10,18,19,35,39,58,75,76,77,80,83,],[3,11,11,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'$end':([1,2,7,18,],[0,-1,-2,-3,]),'IDENTIFIER':([3,8,9,10,11,13,18,19,23,29,31,32,35,36,37,39,40,41,42,43,44,45,46,47,48,49,58,73,75,76,77,80,82,83,],[4,12,12,-5,22,28,-3,-4,28,28,28,28,-6,22,28,-12,28,28,28,28,28,28,28,28,28,28,-11,28,-13,-15,-16,-17,28,-14,]),'LPAREN':([4,13,14,15,16,17,23,29,31,32,37,40,41,42,43,44,45,46,47,48,49,73,82,],[5,29,31,32,33,34,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'RPAREN':([5,25,26,27,28,30,50,51,52,53,54,55,59,60,61,62,63,64,65,66,67,68,69,78,79,84,],[6,-30,-33,-34,-35,-37,69,70,71,72,-18,74,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,-19,-21,-20,]),'LBRACE':([6,70,71,81,],[8,8,8,8,]),'RETURN':([8,9,10,18,19,35,39,58,75,76,77,80,83,],[13,13,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'IF':([8,9,10,18,19,35,39,58,75,76,77,80,83,],[14,14,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'WHILE':([8,9,10,18,19,35,39,58,75,76,77,80,83,],[15,15,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'PRINTF':([8,9,10,18,19,35,39,58,75,76,77,80,83,],[16,16,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'SCANF':([8,9,10,18,19,35,39,58,75,76,77,80,83,],[17,17,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'RBRACE':([9,10,18,19,35,39,58,75,76,77,80,83,],[18,-5,-3,-4,-6,-12,-11,-13,-15,-16,-17,-14,]),'EQUALS':([12,22,],[23,37,]),'NUMBER':([13,23,29,31,32,37,40,41,42,43,44,45,46,47,48,49,73,82,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'STRING':([13,23,29,31,32,33,34,37,40,41,42,43,44,45,46,47,48,49,73,82,],[30,30,30,30,30,54,54,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'ELSE':([18,75,],[-3,81,]),'SEMICOLON':([20,21,22,24,25,26,27,28,30,38,56,57,59,60,61,62,63,64,65,66,67,68,69,72,74,],[35,-8,-9,39,-30,-33,-34,-35,-37,58,-7,-10,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,77,80,]),'COMMA':([20,21,22,25,26,27,28,30,54,56,57,59,60,61,62,63,64,65,66,67,68,69,78,79,84,],[36,-8,-9,-30,-33,-34,-35,-37,73,-7,-10,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,82,-21,-20,]),'LT':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[40,-30,-33,-34,-35,-37,40,40,40,40,40,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,40,40,]),'GT':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[41,-30,-33,-34,-35,-37,41,41,41,41,41,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,41,41,]),'LE':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[42,-30,-33,-34,-35,-37,42,42,42,42,42,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,42,42,]),'GE':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[43,-30,-33,-34,-35,-37,43,43,43,43,43,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,43,43,]),'EQ':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[44,-30,-33,-34,-35,-37,44,44,44,44,44,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,44,44,]),'NE':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[45,-30,-33,-34,-35,-37,45,45,45,45,45,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,45,45,]),'PLUS':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[46,-30,-33,-34,-35,-37,46,46,46,46,46,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,46,46,]),'MINUS':([24,25,26,27,28,30,38,50,51,52,57,59,60,61,62,63,64,65,66,67,68,69,79,84,],[47,-30,-33,-34,-35,-37,47,47,47,47,47,-22,-23,-24,-25,-26,-27,-28,-29,-31,-32,-36,47,47,]),'MULTIPLY':([25,26,27,28,30,59,60,61,62,63,64,65,66,67,68,69,],[48,-33,-34,-35,-37,48,48,48,48,48,48,48,48,-31,-32,-36,]),'DIVIDE':([25,26,27,28,30,59,60,61,62,63,64,65,66,67,68,69,],[49,-33,-34,-35,-37,49,49,49,49,49,49,49,49,-31,-32,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'block':([6,70,71,81,],[7,75,76,83,]),'statements':([8,],[9,]),'statement':([8,9,],[10,19,]),'decl_list':([11,],[20,]),'decl':([11,36,],[21,56,]),'expression':([13,23,29,31,32,37,73,82,],[24,38,50,51,52,57,79,84,]),'term':([13,23,29,31,32,37,40,41,42,43,44,45,46,47,73,82,],[25,25,25,25,25,25,59,60,61,62,63,64,65,66,25,25,]),'factor':([13,23,29,31,32,37,40,41,42,43,44,45,46,47,48,49,73,82,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,67,68,26,26,]),'string_and_args':([33,34,],[53,55,]),'arg_list':([73,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','syntax_analysis.py',22),
  ('function -> INT IDENTIFIER LPAREN RPAREN block','function',5,'p_function','syntax_analysis.py',26),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','syntax_analysis.py',30),
  ('statements -> statements statement','statements',2,'p_statements','syntax_analysis.py',34),
  ('statements -> statement','statements',1,'p_statements','syntax_analysis.py',35),
  ('statement -> INT decl_list SEMICOLON','statement',3,'p_statement_declaration','syntax_analysis.py',44),
  ('decl_list -> decl_list COMMA decl','decl_list',3,'p_decl_list','syntax_analysis.py',48),
  ('decl_list -> decl','decl_list',1,'p_decl_list','syntax_analysis.py',49),
  ('decl -> IDENTIFIER','decl',1,'p_decl','syntax_analysis.py',56),
  ('decl -> IDENTIFIER EQUALS expression','decl',3,'p_decl','syntax_analysis.py',57),
  ('statement -> IDENTIFIER EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','syntax_analysis.py',64),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','syntax_analysis.py',68),
  ('statement -> IF LPAREN expression RPAREN block','statement',5,'p_statement_if','syntax_analysis.py',72),
  ('statement -> IF LPAREN expression RPAREN block ELSE block','statement',7,'p_statement_if_else','syntax_analysis.py',76),
  ('statement -> WHILE LPAREN expression RPAREN block','statement',5,'p_statement_while','syntax_analysis.py',80),
  ('statement -> PRINTF LPAREN string_and_args RPAREN SEMICOLON','statement',5,'p_statement_printf','syntax_analysis.py',88),
  ('statement -> SCANF LPAREN string_and_args RPAREN SEMICOLON','statement',5,'p_statement_printf','syntax_analysis.py',89),
  ('string_and_args -> STRING','string_and_args',1,'p_string_and_args','syntax_analysis.py',96),
  ('string_and_args -> STRING COMMA arg_list','string_and_args',3,'p_string_and_args','syntax_analysis.py',97),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','syntax_analysis.py',104),
  ('arg_list -> expression','arg_list',1,'p_arg_list','syntax_analysis.py',105),
  ('expression -> expression LT term','expression',3,'p_expression_relational','syntax_analysis.py',114),
  ('expression -> expression GT term','expression',3,'p_expression_relational','syntax_analysis.py',115),
  ('expression -> expression LE term','expression',3,'p_expression_relational','syntax_analysis.py',116),
  ('expression -> expression GE term','expression',3,'p_expression_relational','syntax_analysis.py',117),
  ('expression -> expression EQ term','expression',3,'p_expression_relational','syntax_analysis.py',118),
  ('expression -> expression NE term','expression',3,'p_expression_relational','syntax_analysis.py',119),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','syntax_analysis.py',123),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','syntax_analysis.py',124),
  ('expression -> term','expression',1,'p_expression_term','syntax_analysis.py',128),
  ('term -> term MULTIPLY factor','term',3,'p_term_binop','syntax_analysis.py',132),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','syntax_analysis.py',133),
  ('term -> factor','term',1,'p_term_factor','syntax_analysis.py',137),
  ('factor -> NUMBER','factor',1,'p_factor_number','syntax_analysis.py',141),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','syntax_analysis.py',145),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_grouped','syntax_analysis.py',149),
  ('factor -> STRING','factor',1,'p_factor_string','syntax_analysis.py',157),
]
